macro(__enable_cxx20)
	if ( CMAKE_SYSTEM_NAME MATCHES "Windows" )
		set( my_std_pre "/std:" )
	else()
		set( my_std_pre "-std=" )
	endif()

	set( basic_cxx20 "c++20" )
	set( str_cxx20 "${my_std_pre}${basic_cxx20}" )
	
	include( CheckCXXCompilerFlag )
	check_cxx_compiler_flag( "${str_cxx20}" _cpp_20_flag_supported )
	if ( _cpp_20_flag_supported )
		set( CMAKE_CXX_STANDARD 20 )
	endif()
endmacro()

macro(__enable_cxx17)
	if ( CMAKE_SYSTEM_NAME MATCHES "Windows" )
		set( my_std_pre "/std:" )
	else()
		set( my_std_pre "-std=" )
	endif()

	set( basic_cxx17 "c++17" )
	set( str_cxx17 "${my_std_pre}${basic_cxx17}" )
	
	include( CheckCXXCompilerFlag )
	check_cxx_compiler_flag( "${str_cxx17}" _cpp_17_flag_supported )
	if ( _cpp_17_flag_supported )
		set( CMAKE_CXX_STANDARD 17 )
	endif()
endmacro()

macro(__enable_cxx14)
	if ( CMAKE_SYSTEM_NAME MATCHES "Windows" )
		set( my_std_pre "/std:" )
	else()
		set( my_std_pre "-std=" )
	endif()

	set( basic_cxx14 "c++14" )
	set( str_cxx14 "${my_std_pre}${basic_cxx14}" )
	
	include( CheckCXXCompilerFlag )
	check_cxx_compiler_flag( "${str_cxx14}" _cpp_14_flag_supported )
	if ( _cpp_14_flag_supported )
		set( CMAKE_CXX_STANDARD 14 )
	endif()
endmacro()

macro(__enable_bigobj)
	if(WIN32)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
	endif()
endmacro()

# generate BUILD_OS 
macro(__detect_os_arch)
	set(BUILD_OS_OSX OFF)
	set(BUILD_OS_LINUX OFF)
	set(BUILD_OS_WINDOWS OFF)
	set(BUILD_OS_WIN32 OFF)
	set(BUILD_OS_WIN64 OFF)

	if(APPLE)
		set(BUILD_OS_OSX ON)
	elseif(WIN32)
		set(BUILD_OS_WINDOWS ON)
		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			set(BUILD_OS_WIN64 ON)
		else()
			set(BUILD_OS_WIN32 ON)
		endif()
	elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
		set(BUILD_OS_LINUX ON)
	endif()

	set(BUILD_OS "xxxx")
	if(BUILD_OS_WIN64)
		set(BUILD_OS "win64")
	elseif(BUILD_OS_WIN32)
		set(BUILD_OS "win32")
	elseif(BUILD_OS_LINUX)
		set(BUILD_OS "linux")
	elseif(BUILD_OS_OSX)
		set(BUILD_OS "macx")
	endif()
endmacro()
